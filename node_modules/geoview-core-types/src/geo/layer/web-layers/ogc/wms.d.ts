import { Coordinate } from 'ol/coordinate';
import ImageLayer from 'ol/layer/Image';
import { ImageWMS } from 'ol/source';
import { Extent } from 'ol/extent';
import { AbstractWebLayersClass, TypeJsonObject, TypeWMSLayer, TypeJsonArray, TypeBaseWebLayersConfig } from '../../../../core/types/cgpv-types';
export declare const layerConfigIsWMS: (verifyIfLayer: TypeBaseWebLayersConfig) => verifyIfLayer is TypeWMSLayer;
export declare const webLayerIsWMS: (verifyIfWebLayer: AbstractWebLayersClass) => verifyIfWebLayer is WMS;
/**
 * a class to add wms layer
 *
 * @exports
 * @class WMS
 */
export declare class WMS extends AbstractWebLayersClass {
    #private;
    layer: ImageLayer<ImageWMS>;
    /**
     * Initialize layer
     * @param {string} mapId the id of the map
     * @param {TypeWMSLayer} layerConfig the layer configuration
     */
    constructor(mapId: string, layerConfig: TypeWMSLayer);
    /**
     * Add a WMS layer to the map.
     *
     * @param {TypeWMSLayer} layer the layer configuration
     * @return {Promise<ImageLayer<ImageWMS> | null>} layers to add to the map
     */
    add(layer: TypeWMSLayer): Promise<ImageLayer<ImageWMS> | null>;
    /**
     * Get capabilities of the current WMS service
     *
     * @returns {TypeJsonObject} WMS capabilities in json format
     */
    getCapabilities: () => Promise<TypeJsonObject>;
    /**
     * Get the legend image of a layer from the capabilities. Return undefined if it does not exist
     *
     * @returns {string | undefined} URL of a Legend image in png format or undefined
     */
    getLegendUrl: () => string | undefined;
    /**
     * Get the legend image of a layer
     *
     * @param {layerName} string the name of the layer to get the legend image for
     * @returns {blob} image blob
     */
    getLegendGraphic: () => Promise<string | ArrayBuffer | null>;
    /**
     * Get feature info given a latlng
     *
     * @param {Coordinate} lnglat lat/lng coordinates received on any interaction with the map
     * @param {number} featureCount feature count to return
     *
     * @returns {Promise<TypeJsonArray | null>} a promise that returns the feature info in a json format
     */
    getFeatureInfo: (lnglat: Coordinate, featureCount?: number) => Promise<TypeJsonArray | null>;
    /**
     * Set Layer Opacity
     * @param {number} opacity layer opacity
     */
    setOpacity: (opacity: number) => void;
    /**
     * Get bounds
     *
     * @returns {Promise<Extent>} layer bounds
     */
    getBounds: () => Promise<Extent>;
}
