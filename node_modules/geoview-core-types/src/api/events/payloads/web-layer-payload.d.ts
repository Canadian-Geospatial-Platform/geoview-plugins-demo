import { PayloadBaseClass } from './payload-base-class';
import { EventStringId } from '../event';
import { AbstractWebLayersClass } from '../../../core/types/abstract/abstract-web-layers';
/**
 * Type Gard function that redefines a PayloadBaseClass as a WebLayerPayload
 * if the event attribute of the verifyIfPayload parameter is valid. The type ascention
 * applies only to the the true block of the if clause.
 *
 * @param {PayloadBaseClass} verifyIfPayload object to test in order to determine if the type ascention is valid
 * @returns {boolean} returns true of the payload is valid
 */
export declare const payloadIsAWebLayer: (verifyIfPayload: PayloadBaseClass) => verifyIfPayload is WebLayerPayload;
/**
 * Class definition for WebLayerPayload
 *
 * @exports
 * @class WebLayerPayload
 */
export declare class WebLayerPayload extends PayloadBaseClass {
    webLayer: AbstractWebLayersClass;
    /**
     * Constructor for the class
     *
     * @param {EventStringId} event the event identifier for which the payload is constructed
     * @param {string | null} handlerName the handler Name
     * @param {AbstractWebLayersClass} webLayer the WEB layer payload
     */
    constructor(event: EventStringId, handlerName: string | null, webLayer: AbstractWebLayersClass);
}
/**
 * Helper function used to instanciate a WebLayerPayload object. This function
 * avoids the "new WebLayerPayload" syntax.
 *
 * @param {EventStringId} event the event identifier for which the payload is constructed
 * @param {string | null} handlerName the handler Name
 * @param {AbstractWebLayersClass} webLayer the WEB layer payload
 *
 * @returns {WebLayerPayload} the WebLayerPayload object created
 */
export declare const webLayerPayload: (event: EventStringId, handlerName: string | null, webLayer: AbstractWebLayersClass) => WebLayerPayload;
